import { Input, Select } from 'antd';
import Form from 'antd/lib/form';
import Column from 'antd/lib/table/Column';
import React, { useEffect, useRef } from 'react';
import './style.less';

const { Option } = Select;

export const EditableCell: React.FC<Column<RecordType>> = (props) => {
  const {
    minWidth,
    width,
    title,
    dataIndex,
    key,
    editing,
    inputType,
    required,
    pattern,
    message,
    transform,
    options,
    children,
    hasFeedback,
    ...restProps
  } = props;

  const inputRef = useRef<Input>(null);

  useEffect(() => {
    if (dataIndex === 'name') inputRef?.current?.focus();
  }, [editing]);

  const renderOption = (options: string[]) => {
    return options!.map((option, index) => {
      return (
        <Option key={`option:${index}`} value={option} className="option" style={{ textAlign: 'center', color: '#1890ff' }}>
          {option}
        </Option>
      );
    });
  };

  const renderSelect = (options: string[]) => {
    return (
      <Select showSearch showAction={['focus', 'click']} style={{ flex: '1 0 auto', width: '97%', textAlign: 'center', paddingTop: 1 }}>
        {renderOption(options)}
      </Select>
    );
  };

  const renderInput = () => {
    return (
      <Input
        ref={inputRef}
        style={{
          padding: 0,
          paddingLeft: 25,
          paddingRight: 25,
          paddingTop: 1,
          textAlign: 'center',
          width: '97%',
          backgroundColor: 'transparent',
        }}
      />
    );
  };

  const getInput = (inputType: string, options?: string[]) => {
    switch (inputType) {
      case 'select':
        return renderSelect(options!);

      default:
        return renderInput();
    }
  };

  return (
    <td {...restProps}>
      {/*console.log(children)*/}
      {editing ? (
        <Form.Item
          hasFeedback={hasFeedback === false ? false : true}
          name={dataIndex}
          rules={[{ required, pattern, message, transform }]}
          style={{ margin: 0, padding: 0, minWidth, width }}>
          {getInput(inputType!, options)}
        </Form.Item>
      ) : (
        children
      )}
    </td>
  );
};
