/*import _ from 'lodash';
import { ContenidoCajaAction, ContenidoCajaActionTypes, ContenidoCajaState } from 'src/actions/cajas/caja-contenido_/types';

const initialState: ContenidoCajaState = {
  isRunning: false,
  contenido: [],
};

export default function reducer(state = initialState, action: ContenidoCajaActionTypes): ContenidoCajaState {
  switch (action.type) {
    case ContenidoCajaAction.RUNNING_CONTENT:
      return {
        ...state,
        isRunning: true,
      };

    case ContenidoCajaAction.CREATE_LOCAL_CONTENT:
      return {
        ...state,
        contenido: [...state.contenido, action.payload],
      };

    case ContenidoCajaAction.CLEAN_LOCAL_CONTENT:
      return {
        ...state,
        contenido: state.contenido.filter((e) => _.size(e) > 1),
      };

    case ContenidoCajaAction.ADD_CONTENT_SUCCESS:
      return {
        ...state,
        contenido: state.contenido.map((element, index, array) => {
          if (array.length - 1 === index) return action.payload;
          else return element;
        }),
      };

    case ContenidoCajaAction.ADD_CONTENT_FAILURE:
      return {
        ...state,
        contenido: state.contenido.slice(0, -1),
      };

    case ContenidoCajaAction.UPDATE_CONTENT_SUCCESS:
      return {
        ...state,
        contenido: state.contenido.map((element) => {
          if (element.id === action.payload.id) return action.payload;
          else return element;
        }),
      };

    case ContenidoCajaAction.REMOVE_CONTENT_SUCCESS:
      return {
        ...state,
        // contenido: _.reject(state.contenido, (e) => _.includes(action.payload, e.id)),
      };

    default:
      return state;
  }
}
*/
